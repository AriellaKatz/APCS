Arrays – Think Java Ch 8

Vocab:
• Array
• Elements
• Array type
• Reference
• Aliases
• Traversal
• Search
• Reduce
• Accumulator
• Deterministic
• Nondeterministic
• Pseudorandom
• Counters
• Enhanced for loops

Notes:
	An array is a sequence of values (called elements).
	The elements may be any data type, but they must all be the same type.
	To create an array, you declare a variable with an array type (the data type of the elements that will be in the array). This is done the same way as declaring a regular variable, but with []:
double[] values = new double[size]; //values will represent the array, whose elements are doubles. We then create the array by using the new operator. The number of elements in this array will be equal to the value of size.
	The size of an array can be any nonnegative integer expression.
	When you make an array of ints, the elements are initialized to 0.
	The value of values is a reference to the corresponding array; they are separate entities and can be reassigned to other arrays or variables, respectively.
	Each element of an array has a corresponding index, starting with 0 and increasing by 1, which identifies the element’s location in the array.
	We can select an element in the array:
values[index]
	To change the value of an element with index 3 in the array:
values[3] = 6; //The value of element 3 is now 6.
values[3] = values[2] * 2 //The value of element 3 is now twice that of 
// element 2.
values[3]++; //The value of element 3 is now increased by an increment of 1.
values[3] -= 60; //The value of element 3 is now decreased by 60.
	You can use any expression as an index as long as it has type int.
	You can also initialize the values of the elements when you first create the array:
int[] a = {1, 2, 3, 4}; //This an int type array called a with elements 1, 2, // 3, and 4.
	To display the elements of an array, you have to display the elements one at a time (System.out.println(a) won’t work). This is often done using a loop.
	The Java library provides a utility class java.util.Arrays that provides methods for working with arrays. It must be imported before you can use it.
	toString lets you return a string representation of an array:
System.out.println(Arrays.toString(a));
↪ [1, 2, 3, 4]
	Array variables contain references to arrays. Multiple references can be made to the same array; different variables can refer to the same array. Any change made to the array through any variable will be seen for the other variable(s) as well. 
	Since these variables are different names for the same thing, they’re called aliases.
	If you want to copy the array (so you have two distinct ones with the same elements and different variables), you have to copy the elements one at a time using a loop:
double[] b = new double[4];
for (int i = 0; i < 4; i++) {
	b[i] = a[i];
}
Or, you can use java.util.Arrays, which provides the method copyOf:
double[] b = Arrays.copyOf(a, 4)
The 2nd parameter is the number elements you want to copy (you can just copy part of an array).
	All arrays have a built-in constant, length, that stores the number of elements. 
	a.length = 4
	a.length can be used in Arrays.copyOf for the 2nd parameter.
	You can implement computations on an array by looping through its elements and performing an operation on each element.
	Looping through the elements of an array is called a traversal.
	A search  is when you traverse an array looking for a particular element. If you find the target value, you can return its index. If the loop exits without finding the target, we can have it display a chosen value that indicates a failed search.
	A reduce operation (a common traversal) “reduces” an array of values down to a single value, like the sum or product of the elements, the minimum, or the maximum:
public static double sum(double[] a) {
	double total = 0.0;
	for (int i = 0; I < a.length; i++) {
		total += a[i];
	}
	return total;
}
Before the loop, we initialize total to 0. Each iteration updates total by adding 1 element from the array, and at the end of the loop, total contains the sum of the elements. A variable used like this is called an accumulator.
	Deterministic programs do the same thing every time they run. However, sometimes we want the computer to be unpredictable, so we make a program nondeterministic.
	Pseudorandom numbers are generated by algorithms that create unpredictable sequences, and usually, they’re as good as random.
	java.util.Random (must be imported like Scanner) generates pseudorandom numbers: *See Ch 3.12 Ex 4
public static int[] randomArray(int size) {
	Random random = new Random90;
	int[] a = new int[size];
	for (int i = 0; i < a.length; i++) {
		a[i] = random.nextInt(100); //This selects a random integer 
// from 0-99, inclusive.
	}
	return a;
}
int numValues = 8;
int[] array = randomArray(numValues);
printArray(array);
↪ {15, 62, 46, 74, 67, 52, 51, 10} //You will probably get different // values if you run it.
	We can count how many times elements with values within a given range (between the integers low and high) appear, like a histogram:
public static int inRange(int[] a, int low, int high) {
	int count = 0;
	for (int i = 0; i , a.length; i++) {
		if (a[i] >= low && a[i] < high) {
			count++;
		}
	}
	return count;
}
However, this gets ridiculous if there are a lot of ranges (called counters).
	Say we want to see how many times each test score in a class appears. Then we want 100 counters, so we need a way to store them, preferably so that we can use an index to access them. So, we need another array:
int[] counts = new int[100];
for (int i = 0; I < scores.length; i++) {
	int index = scores[i];
	counts[index]++;
}
Each time through this loop, it selects an element from the array scores and uses it as an index in the array counts and increments the value of the corresponding element in counts.
	Consider the following:
for (int i = 0; i < values.length; i++) {
	int value = values[i];
	System.out.println(value);
}
This can be condensed in an enhanced for loop:
for (int value : values) { //Can be read as “for each value in values”.
	System.out.println(value);
}
The first line of this loop replaces the first 2 lines of the other.
Let’s rewrite the histogram code more concisely:
int[] counts = new int[100];
for (int score : scores) {
	counts[score]++;
}
Enhanced for loops make code more readable, but are not helpful if you need to refer to the index in the body.
