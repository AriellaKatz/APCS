/*
Team Pink Lemonade: Ariella Katz, Emily Ortiz, Jacob Ng
APCS pd6
L07: But These Go Up To Eleven
2022-03-18
time spent: many hrs
*/

Activity 2:
1. A deck has/manipulates an ArrayList of cards.
2. The deck contains 2 cards, since it can only make two complete sets of ranks,
suits, and pointValues.
3. String[] ranks = {"two", "two", "two, "two",
                    "three", "three", "three", "three",
                    "four", "four", "four", "four",
                    "five", "five", "five", "five",
                    "six", "six", "six", "six",
                    "seven", "seven", "seven", "seven",
                    "eight", "eight", "eight", "eight",
                    "nine", "nine", "nine", "nine",
                    "ten", "ten", "ten", "ten",
                    "jack", "jack", "jack", "jack",
                    "queen", "queen", "queen", "queen",
                    "king", "king", "king", "king",
                    "ace", "ace", "ace", "ace"};
   String[] suits = {"spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds",
                    "spades", "hearts", "clubs", "diamonds"};
   int[] pointValues = {2, 2, 2, 2,
                       3, 3, 3, 3,
                       4, 4, 4, 4,
                       5, 5, 5, 5,
                       6, 6, 6, 6,
                       7, 7, 7, 7,
                       8, 8, 8, 8,
                       9, 9, 9, 9,
                       10, 10, 10, 10,
                       10, 10, 10, 10,
                       10, 10, 10, 10,
                       10, 10, 10, 10,
                       10, 10, 10, 10,
                       11, 11, 11, 11};
4. Yes, because they will be paired up based on their indexes in their
respective arrays.

Activity 3:
1. public static String flip() {
     int val = (int)(Math.random() * 3);
     if (val < 2) { return "heads"; }
     else { return "tails"; }
   }
2. public static boolean arePermutations(int[] one, int[] two) {
     for (int i = 0; i < one.length; i++) {
       if (two.indexOf(one[i]) == -1) { return false; }
     }
     return true;
   }
3. 0, 0, 0, 0

Activity 7:
1. List<Cards> deck
   List<Cards> cards
2. Until a removal is made, try the following steps for each card on the board:
     Does it have a numerical value?
       Yes: Look through the proceeding cards for a value that will add to 11.
            If you find one, remove the two cards and go to the removal step.
       No: Look through the proceeding cards for two other face cards.
           If you find them, remove the three cards and go to the removal step.
     If you get through the entire board without removing anything, you've lost.
   After removing cards, replace them with new cards from the deck, if such
   cards are available. Otherwise, continue with the remaining cards.
3. It may need a method for selecting cards, depending on the implementation of
methods that are currently blank.
4. a. the constructor
   b. replaceSelectedCards, anotherPlayIsPossible
   c. | 0 | 1 | 3 | 6 | 7 |   |   |   |   |
   d. public static void printCards(ElevensBoard board) {
        List<Integer> cIndexes = board.cardIndexes();
        String[] suits = new String(cIndexes.size());
        String[] ranks = new String(cIndexes.size());
        String[] pointValues = new String(cIndexes.size());
        for (int i = 0; i < cIndexes.length; i++) {
          suits[i] = (cards.cardAt(cIndexes.get(i))).suit();
          ranks[i] = (cards.cardAt(cIndexes.get(i))).rank();
          pointValues[i] = (cards.cardAt(cIndexes.get(i))).pointValue();
        }
        Deck accCards = new Deck(suits, ranks, pointValues);
        System.out.println(accCards);
      }
   e. replaceSelectedCards
